* Initial startup
** Debug traceback
#+BEGIN_SRC emacs-lisp
  (setq debug-on-error t)
#+END_SRC
* Terminal
** setting default shell to bash
#+BEGIN_SRC emacs-lisp
  ;; this calls ansi-term with bash as default shell
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

* General preferences
** shorten yes-or-no key press
#+BEGIN_SRC emacs-lisp
  ;; change yes or no answer to y or n to reduce key presses
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** line by line scroll when edging screen
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** disable audio bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** disable gui elements to maximize screen
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** line number... disables when appropriate
#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)

  (add-hook 'eshell-mode-hook (lambda ()
                                  (linum-mode -1)))
  (add-hook 'term-mode-hook (lambda ()
                                (linum-mode -1)))
#+END_SRC

** diable auto-save and backups
#+BEGIN_SRC emacs-lisp
  ;; disable backup files and auto-saving
  (setq make-backup-file nil)
  (setq auto-save-default nil)
#+END_SRC

** general shortcuts
#+BEGIN_SRC emacs-lisp
  ;; remove suspend emacs shortcut
  (global-unset-key (kbd "C-z"))
  ;; shortcut to open up ansi-term
  (global-set-key (kbd "C-c C-<return>") 'ansi-term)
#+END_SRC

** scroll margin for easier reading
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 7)
#+END_SRC

** subword
#+BEGIN_SRC emacs-lisp
  ;; correctly treats camel case as separate words
  (global-subword-mode 1)
#+END_SRC
** electric typing
#+BEGIN_SRC emacs-lisp
  ;; enable auto pairing for some types...
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\{ . ?\})
                              ))
  (electric-pair-mode t)
#+END_SRC
** paren
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** prettify symbol
#+BEGIN_SRC emacs-lisp
  (when window-system (global-prettify-symbols-mode t))
#+END_SRC
* Clock
** Enables clock on modeline
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format 5)
  (display-time-mode 1)
#+END_SRC
* Org mode
** basic config
#+BEGIN_SRC emacs-lisp
  ;; edit source in current window... no new tab
  (setq org-src-window-setup 'current-window)

  ;; visually indent subheadings to improve readability
  (add-hook 'org-mode-hook 'org-indent-mode)

  ;; makes src blocks easier to read
  (setq org-src-fontify-natively t
        org-src-tab-acts-natively t)

#+END_SRC
** templates
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Exports
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t)
#+END_SRC
** notes
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c o")
                  (lambda ()
                    (interactive)
                    (find-file "~/.emacs.d/quicknotes.org")))
#+END_SRC
* IDO
** enable IDO mode
#+BEGIN_SRC emacs-lisp
  ;; adding some standard ido preferences and enable ido
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** IDO-vertical package, looks better
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init (ido-vertical-mode 1))
  ;; bind keys for moving up and down
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** IDO for M-x (smex)
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind ("M-x" . smex))
#+END_SRC
* Buffers
** Set default buffer manager to ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Set always kill current buffer
No more confirmation of which buffer to kill after C-x k... Use ibuffer more sophistiated killings
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
* Dashboard
A package that offers a much better startup screen, displaying recent files.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    ;; This specifically uses the fortune command to generate a welcome screen message.
    (setq dashboard-banner-logo-title (shell-command-to-string "fortune -s -n 100 2> /dev/null | tr '\n' ' ' | awk '{$1=$1;print}'")))
#+END_SRC
* Avy
A package that allows you to go to any character on screen.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC
* Config edit and reload
Some custom shortcuts to edit and reload main config file.
** find config file and edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload config file
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Rainbow
A package that changes the background colour to the corresponding hex code that is under it. 
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))

#+END_SRC
* Rainbow Delimiters
A package that colours parenthesis with matching depth. Very useful for lisp!
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
* Window management
Some custom tweaks to enhance the experience with window manipulation.
** Override window splitting functions... move cursor correspondingly when opening splits
#+BEGIN_SRC emacs-lisp
  ;; split window horizontally and let cursor position
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  ;; split window vertically and toggle cursor position
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Functions to move between Window 
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c h") 'windmove-left)
  (global-set-key (kbd "C-c l") 'windmove-right)
  (global-set-key (kbd "C-c k") 'windmove-up)
  (global-set-key (kbd "C-c j") 'windmove-down)
#+END_SRC
* Editing
Some custom tweaks to enhance editing.
** A function for killing the current word!
#+BEGIN_SRC emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (backward-word)
    (kill-word 1))
  (global-set-key (kbd "C-c w k") 'kill-whole-word)
#+END_SRC
* Company mode
A package for auto-completion, note that this still requires manually adding back-ends.
** Initialize
#+BEGIN_SRC emacs-lisp
  ;; install company mode
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  (use-package company-quickhelp
    :ensure t
    :config
    (setq company-quickhelp-delay 1))

  (require 'company-quickhelp)
  (company-quickhelp-mode)
#+END_SRC
* Spaceline
A package that enhance the readability of the modeline.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-emacs-theme))
#+END_SRC
* Dmenu
A package that allows you to run any application easily in emacs.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("C-c d" . 'dmenu))
#+END_SRC
* Symon
A package that shows live resource usage.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("C-c s" . 'symon-mode))
#+END_SRC
* Hlinum
A package that highlights the current line number. 
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package hlinum
    :ensure t
    :init (hlinum-activate))
#+END_SRC
* Popup kill ring
A package that adds a popup menu for kill ring selections
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Swiper
** a better search
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
* Mark-multiple
Basically multi-cursor...
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC
* Expand-region
A package that allows you to expand selection from current position.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
* Sudo edit
A package that allow you to edit remote files and local files that require additional sudo permission.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c p" . sudo-edit))
#+END_SRC
* Yasnippet
A package that allows you to add and use snippets.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp
  ;; manually add required hooks... avoid global-mode
  (add-hook 'python-mode-hook 'yas-minor-mode)
  (add-hook 'java-mode-hook 'yas-minor-mode)
#+END_SRC

* Flycheck
A package that enables syntax checking for programming
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t)
#+END_SRC
* ZZZ
An upgraded zap-to-char package that allows you to delete to a selected character.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :ensure t
    :bind ("M-z" . zzz-up-to-char))
#+END_SRC
* Magit
A package that integrates git with more intuitive controls
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC
* Projectile
** Initialize
#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :init
      (projectile-mode 1))
#+END_SRC
* Neotree
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :bind ([f8] . neotree-toggle))
#+END_SRC
* Buffer-move
A package that allows you to move windows around
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package buffer-move
    :ensure t
    :bind
    ("C-c b h" . buf-move-left)
    ("C-c b l" . buf-move-right)
    ("C-c b k" . buf-move-up)
    ("C-c b j" . buf-move-down)
    )
#+END_SRC
* Undo Tree
A package that gives you a visual history of undos
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init (global-undo-tree-mode))
#+END_SRC
* Linum-relative
Relative line mode!
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :init
    (setq linum-relative-current-symbol "")
    )
  (linum-relative-mode)
#+END_SRC
* Git gutter
A live visual on git changes
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t)
  (global-git-gutter-mode +1)
#+END_SRC
* Beacon
A package that makes it easier to keep track of the mark/cursor
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
* Evil mode
An extensive vi layer for better editing experience.
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-normal-state-cursor '("orchid")
          evil-emacs-state-cursor '("light blue")
          evil-insert-state-cursor '("SpringGreen" bar)
          evil-replace-state-cursor '("chocolate1" hbar)
          evil-visual-state-cursor '("gray")))
  (require 'evil)
  (evil-mode 1)
  ;; remap C-u for vim-like functionality.
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-visual-state-map (kbd "C-u") 'evil-scroll-up)
  (define-key evil-insert-state-map (kbd "C-u")
    (lambda ()
      (interactive)
      (evil-delete (point-at-bol) (point))))
#+END_SRC
* Diminish
Hide some of the minor modes taking up space on the modeline
** Initialize
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure
    :init
    (diminish 'beacon-mode)
    (diminish 'rainbow-mode)
    (diminish 'which-key-mode)
    (diminish 'undo-tree-mode))
#+END_SRC
